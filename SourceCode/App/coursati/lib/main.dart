import 'dart:async';
import 'dart:convert';
import 'package:coursati/Classes/TrainingCenter.dart';
import 'package:coursati/Widgets/TrainingCenter/AddTrainer.dart';
import 'package:coursati/firebase_options.dart';
import 'package:cr_file_saver/file_saver.dart';
import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_icmp_ping/flutter_icmp_ping.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:http/http.dart' as http;
import 'package:coursati/Services/Controller/FileHandle.dart';
import 'package:flutter/material.dart';
// import 'package:shared_preferences/shared_preferences.dart';
import 'Classes/GlobalVariables.dart';
import 'Screens/main_page.dart';
// ignore: depend_on_referenced_packages
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:permission_handler/permission_handler.dart';
import 'Widgets/ErrorServer.dart';
// core Flutter primitives
import 'package:flutter/foundation.dart';
// core FlutterFire dependency
import 'package:firebase_core/firebase_core.dart';
// generated by

import 'firebase_options.dart';
// FlutterFire's Firebase Cloud Messaging plugin
import 'package:firebase_messaging/firebase_messaging.dart';

// TODO: Add stream controller

import 'package:rxdart/rxdart.dart';

// used to pass messages from event handler to the UI
final _messageStreamController = BehaviorSubject<RemoteMessage>();

// TODO: Define the background message handler
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();

  if (kDebugMode) {
    print("Handling a background message: ${message.messageId}");
    print('Message data: ${message.data}');
    print('Message notification: ${message.notification?.title}');
    print('Message notification: ${message.notification?.body}');
  }
}

// Future getToken() async {
//   return await Dio().post("http://192.168.1.11:8000/api/auth/token",
//       data: {"email": "nader@email.com", "password": "password"});
// }

Future<void> main() async {
  //????????????????????????????????/
  //* FireBase Notification handling
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runZonedGuarded(() async {
    // WidgetsFlutterBinding.ensureInitialized();
    // checkServer().then((value) {
    //   if (connected == 1) {
    CRFileSaver.requestWriteExternalStoragePermission();
    Permission.location;

    FileHandle().readConfig().then((value) {
      if (value != null) {
        FileHandle().extractConfigData();
      } else {
        FileHandle().writeConfig(ConfigSave);
      }
      runApp(const MainApp());
    });
    //   } else {
    //     runApp(ServerError(error: connected));
    //   }
    // });
  }, (_, s) {});
  // // TODO: Request permission
}

class MainApp extends StatefulWidget {
  const MainApp({super.key});

  @override
  State<MainApp> createState() => _MainAppState();
}

class _MainAppState extends State<MainApp> {
  String _lastMessage = "";

  // Future<void> setupInteractedMessage() async {
  //   // Get any messages which caused the application to open from
  //   // a terminated state.
  //   RemoteMessage? initialMessage =
  //       await FirebaseMessaging.instance.getInitialMessage();

  //   // If the message also contains a data property with a "type" of "chat",
  //   // navigate to a chat screen
  //   if (initialMessage != null) {
  //     _handleMessage(initialMessage);
  //   }

  //   // Also handle any interaction when the app is in the background via a
  //   // Stream listener
  //   FirebaseMessaging.onMessageOpenedApp.listen(_handleMessage);
  // }
// void _handleMessage(RemoteMessage message) {
//     if (message.data['type'] == 'chat') {
//       Navigator.pushNamed(context, '/chat',
//         arguments: ChatArguments(message),
//       );
//     }
//   }

  @override
  void initState() {
    super.initState();
    requestPermssionFireBase();
    getToken();
    //  setupInteractedMessage();
  }

  _MainAppState() {
    _messageStreamController.listen((message) {
      setState(() {
        if (message.notification != null) {
          _lastMessage = 'Received a notification message:'
              '\nTitle=${message.notification?.title},'
              '\nBody=${message.notification?.body},'
              '\nData=${message.data}';
        } else {
          _lastMessage = 'Received a data message: ${message.data}';
        }
      });
      print(_lastMessage);
      print("bye");
    });
  }

  @override
  Widget build(BuildContext context) {
    languageSelector = (languageType == 0) ? [true, false] : [false, true];

    return MaterialApp(
      title: (languageType == 0) ? "كورساتي" : "Coursati",
      debugShowCheckedModeBanner: false,
      home: const MainPage(),
//

      localizationsDelegates: const [
        GlobalCupertinoLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate
      ],
      supportedLocales: local,
      locale: local[languageType],
      theme: ThemeData(
        colorScheme: const ColorScheme(
            //*This is the background of the app
            background: Colors.white,
            brightness: Brightness.light,
            error: Colors.red,
            onBackground: Colors.amber,
            onError: Colors.cyan,
            //*This Color is for Text And Alike
            onPrimary: Color(0xff555555),
            onSecondary: Colors.amber,
            //* This Color is for disabled buttons and stuff
            onSurface: Color(0xff999999),
            //*This Color is For buttons and stuff like this
            primary: Color(0xff1776e0),
            //*This Colors is For Splash
            secondary: Color(0xff1776e0),
            surface: Colors.white),
        textTheme: const TextTheme(
          titleLarge: TextStyle(color: Colors.white),
          titleMedium: TextStyle(color: Colors.white),
        ),
        fontFamily: "Tajawal",
      ),
      darkTheme: ThemeData(
        colorScheme: const ColorScheme(
            //*This is the background of the app
            background: Color(0xff424242),
            brightness: Brightness.dark,
            error: Colors.red,
            onBackground: Colors.amber,
            onError: Colors.cyan,
            //*This Color is for Text And Alike
            onPrimary: Color.fromARGB(255, 104, 104, 104),
            onSecondary: Colors.amber,
            //* This Color is for disabled buttons and stuff
            onSurface: Color(0xff999999),
            //*This Color is For buttons and stuff like this
            primary: Color(0xff1776e0),
            //*This Colors is For Splash
            secondary: Color(0xff1776e0),
            surface: Color(0xff424242)),
      ),
      themeMode: themeSelector[(isDark) ? 1 : 0],
    );
  }

  void requestPermssionFireBase() async {
    FirebaseAnalytics analytics = FirebaseAnalytics.instance;
    final messaging = FirebaseMessaging.instance;
    messaging.subscribeToTopic('app_promotion');
    final settings = await messaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );
    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      if (kDebugMode) {
        Fluttertoast.showToast(msg: "all good");
      }
    } else if (settings.authorizationStatus ==
        AuthorizationStatus.provisional) {
      if (kDebugMode) {
        Fluttertoast.showToast(msg: "granted provisonal permissons");
      }
    } else {
      if (kDebugMode) {
        Fluttertoast.showToast(msg: "Denied");
      }
    }
  }

  void getToken() async {
    await FirebaseMessaging.instance.getToken().then((token) {
      setState(() {
        deviceID = token.toString();
        if (kDebugMode) {
          print(deviceID);
        }
      });
    });
  }
}

Future checkServer() async {
  // try {
  //   //*** This is the default server check */
  //   // response = await http.get(Uri.parse(server));
  //   //!! temp server check

  //   var response =
  //       await http.get(Uri.parse(onlineServer + "Courses/NewCourses"));
  //   if (response.statusCode == 200) {
  //     return 1;
  //   } else {
  //     return 2;
  //   }
  // } catch (e) {
  //   return 0;
  // }

  ///??????????????????? The new server check

  try {
    var ping = Ping(ser, count: 3, timeout: 1, ipv6: false);
    var res = await ping.stream.listen((event) {
      print(event);

      if (event.error == null) {
        connected = 1;
      }
    });
  } catch (exception) {
    connected = 0;
  }
}
